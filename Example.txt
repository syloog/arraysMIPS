.data
	message: .asciiz "Enter the size of the array: "
	message2: .asciiz "Enter a number as an element of the array: "
	message3: .asciiz "Choose a subprogram \n 1 - reading the array \n 2 - Bubble Sort \n 3 - Second Max and Second Min \n 4 - Finding the Median \n 5 - Print the array \n 6 - exit \n"
	newSpace: .asciiz " "
	newLine:  .asciiz "\n"
	.globl main
.text

	main:
	
	monitor:
	
	li $v0, 4
	la $a0, message3 # printing message to the user
	syscall
	
	li $v0, 5
	syscall
	
	beq $v0, 1, jumpRead
	beq $v0, 2, jumpBubble
	beq $v0, 3, jumpSecond
	beq $v0, 4, jumpMedian
	beq $v0, 5, jumpPrint
	beq $v0, 6, exit
	
	jumpRead:
	li $v0, 4
	la $a0, message # printing message to the user
	syscall
	
	li $v0, 5 #getting the size of the array
	syscall

	move $s1, $v0 # $s1 = the size of the array
	ble $s1, 3, main # control point if the size is declared by 0 or less
	mul $a1, $s1, 4
	add $a0, $a1, $0 #enough space for the given size
	li $v0 9 #syscall 9 (sbrk)
	syscall

	la $s0, ($v0) # $s0 = the address of the array
	la $t0, ($s0) # the address of the array given to the function
	la $t1, ($s1) # the number of the elements in the array given to the function
	jal readArray
	la $s0, ($v0) # $v0 = return address
	la $s1, ($v1) # $v1 = return number of elements
	j monitor
	
	jumpBubble:
	la $a0, ($s0) # the address of the array given to the function
	la $a1, ($s1) # the number of the elements in the array given to the function
	jal BubbleSort
	j monitor
	
	jumpMedian:
	la $a0, ($s0) # the address of the array given to the function
	la $a1, ($s1) # the number of the elements in the array given to the function
	jal Median
	
	la $a0, ($v0) # $v0 = returned median value
	li $v0, 1
	syscall
	
	la $a0, newLine
	li $v0, 4
	syscall
	j monitor
	
	jumpSecond:
	la $a0, ($s0) # the address of the array given to the function
	la $a1, ($s1) # the number of the elements in the array given to the function
	jal Second
	la $t0, ($v0)
	la $t1, ($v1)
	
	la $a0, ($t0) # $t0 = returned second Min value
	li $v0, 1
	syscall
	
	la $a0, newLine
	li $v0, 4
	syscall
	
	la $a0, ($t1) # $t1 = returned second Max value
	li $v0, 1
	syscall
	
	la $a0, newLine
	li $v0, 4
	syscall
	
	j monitor
	
	jumpPrint:
	la $t0, ($s0) # the address of the array given to the function
	la $t1, ($s1) # the number of the elements in the array given to the function
	jal Print
	j monitor
	
	readArray:
	la $t3, ($t0) # the address of the array
	li $t2, 0 # number of elements counted
	begin:
	li $v0, 4
	la $a0, message2
	syscall
	
	li $v0, 5 # getting integer from the user
	syscall
	
	sw $v0, ($t0) # saving the given value to the array
	addi $t0, $t0, 4 # incrementing the array's address by 4 to write other elements
	addi $t2, $t2, 1 # incrementing the count
	bne $t1, $t2, begin
	
	la $v0, ($t3) # saving the array's address to $v0
	la $v1, ($t2) # saving the array's number of elements to $v1
	jr $ra # return readArray
	
	BubbleSort:
	la $t0, ($a0) # the address of the array
	add $t1, $a1, $0 # number of elements in the array
	mul $t1, $t1, 4 # multiplying by 4 to make the calculations easier and reach the array's elements
	li $t2, 0 # i = 0
	begin2:
	beq $t2, $t1, end2 # if $t2 (elements counted) = $t1 (elements in the array) then subprogram exits
	sub $t7, $t1, $t2
	sub $t7, $t7, 8 # $t7 = $t1 - $t2 - 4, to check the j's value, $t7 is the control point
	li $t3, 0 # j = 0
	loop:
	bgt $t3, $t7, endLoop # exits loop when $t3 => $t7
	add $t0, $t0, $t3 # accessing the next value in the array
	lw $t5, ($t0) # $t5 = left element
	lw $t6,4($t0) # $t6 = right element
	sub $t0, $t0, $t3 # returning to original address
	bge $t6, $t5, notSwap # Swap check
	add $t0, $t0, $t3 # accessing the next value in the array
	sw $t6, ($t0) # swap
	sw $t5,4($t0) # swap
	sub $t0, $t0, $t3 # returning to original address
	notSwap:	
	addi $t3, $t3, 4 # incrementing j value
	b loop
	endLoop:
	addi $t2, $t2, 4 # incrementing i value
	b begin2
	end2:
	jr $ra # return

	Median:
	add $sp, $sp,-4 # allocating space for $ra
	sw $ra, ($sp)
	jal BubbleSort # BubbleSort
	lw $ra, ($sp)
	add $sp, $sp, 4 # deleting space for $ra
	
	rem $t1, $a1, 2
	srl $a1, $a1, 1 # dividing the number of elements by 2
	beq $t1, 1, odd
	beq $t1, 0, even
	odd:
	mul $a1, $a1, 4 # multiplying by 4 to make it easier to access the addresses
	add $a0, $a0, $a1 # accessing the Median's address
	lw $v0, ($a0) # loading the address of Median
	jr $ra # return
	even:
	mul $a1, $a1, 4 # multiplying by 4 to make it easier to access the addresses
	add $a0, $a0, $a1 # accessing the Median's address
	sub $a0, $a0, 4
	lw $v0, ($a0) # loading the address of Median
	lw $v1, 4($a0)
	add $v0, $v0, $v1
	div $v0, $v0, 2
	jr $ra # return
	
	Second:
	add $sp, $sp,-4 # allocating space for $ra
	sw $ra, ($sp)
	jal BubbleSort # BubbleSort
	lw $ra, ($sp)
	add $sp, $sp, 4 # deleting space for $ra
	
	lw $v0, 4($a0) # loading the second Min value
	mul $a1, $a1, 4 # multiplying by 4 to make it easier to access the addresses
	add $a0, $a0, $a1 
	sub $a0, $a0, 8 # calculations for reaching the address before the last address
	lw $v1,  ($a0) # loading the second Max value
	jr $ra # return
	
	Print:
	li $t2, 0 #count
	
	begin3:
	lw $a0, ($t0) #first address of the array
	li $v0, 1 
	syscall
	
	la $a0, newSpace # new Space between numbers
	li $v0, 4
	syscall
	
	addi $t2, $t2, 1 # incrementing count
	addi $t0, $t0, 4 # incrementing address
	
	bne $t1, $t2, begin3
	
	la $a0, newLine # new Line
	li $v0, 4
	syscall
	jr $ra
	
	exit:
